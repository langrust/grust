(* #"/home/thome/Documents/git/langrust/grustine/examples/aeb_greusot/src/lib.rs" 5 0 54 1 *)

let%span slib0 = "/home/thome/Documents/git/langrust/grustine/examples/aeb_greusot/src/lib.rs" 5 0 54 1
let%span slib1 = "/home/thome/Documents/git/langrust/grustine/examples/aeb_greusot/src/lib.rs" 23 31 23 34

use creusot.int.Int64

use creusot.prelude.Intrinsic

use creusot.int.Int64

use mach.int.Int

function compute_soft_braking_distance'1 [#"/home/thome/Documents/git/langrust/grustine/examples/aeb_greusot/src/lib.rs" 5 0 54 1] (speed : int) : int

 =
  [%#slib0] Int.div (speed * speed) 100

meta "compute_max_steps" 1000000

let rec compute_soft_braking_distance'0[#"/home/thome/Documents/git/langrust/grustine/examples/aeb_greusot/src/lib.rs" 5 0 54 1] (speed:Int64.t) (return'  (ret:Int64.t))= {[@expl:compute_soft_braking_distance requires] [%#slib0] 0
  <= Int64.to_int speed
  /\ Int64.to_int speed < 50}
  (! bb0
  [ bb0 = s0
    [ s0 = Int64.mul {speed} {speed} (fun (_ret':Int64.t) ->  [ &_4 <- _ret' ] s1)
    | s1 = Int64.eq {[%#slib1] (100 : Int64.t)} {[%#slib0] (0 : Int64.t)} (fun (_ret':bool) ->  [ &_7 <- _ret' ] s2)
    | s2 = {[@expl:division by zero] [%#slib0] not _7} s3
    | s3 = bb1 ]
  
  | bb1 = s0
    [ s0 = Int64.eq {[%#slib1] (100 : Int64.t)} {[%#slib0] (-1 : Int64.t)} (fun (_ret':bool) ->  [ &_8 <- _ret' ] s1)
    | s1 = Int64.eq {_4} {[%#slib0] (-9223372036854775808 : Int64.t)} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s2)
    | s2 =  [ &_10 <- _8 && _9 ] s3
    | s3 = {[@expl:Div overflow] [%#slib0] not _10} s4
    | s4 = bb2 ]
  
  | bb2 = s0
    [ s0 = Int64.div {_4} {[%#slib1] (100 : Int64.t)} (fun (_ret':Int64.t) ->  [ &_0 <- _ret' ] s1)
    | s1 = return' {_0} ]
   ]
  )
  [ & _0 : Int64.t = Intrinsic.any_l ()
  | & speed : Int64.t = speed
  | & _4 : Int64.t = Intrinsic.any_l ()
  | & _7 : bool = Intrinsic.any_l ()
  | & _8 : bool = Intrinsic.any_l ()
  | & _9 : bool = Intrinsic.any_l ()
  | & _10 : bool = Intrinsic.any_l () ]
  
  [ return' (result:Int64.t)-> {[@expl:compute_soft_braking_distance ensures] [%#slib0] Int64.to_int result
    = compute_soft_braking_distance'1 (Int64.to_int speed)}
    (! return' {result}) ]
  
