(* #"/home/thome/Documents/git/langrust/grustine/examples/aeb_greusot/src/lib.rs" 5 0 54 1 *)

(* <Braking as creusot_contracts::PartialEq> *)

let%span slib0 = "/home/thome/Documents/git/langrust/grustine/examples/aeb_greusot/src/lib.rs" 5 0 54 1
let%span smodel1 = "/home/thome/Documents/git/langrust/grustine/creusot/creusot-contracts/src/model.rs" 45 8 45 28
let%span slib2 = "/home/thome/Documents/git/langrust/grustine/examples/aeb_greusot/src/lib.rs" 5 0 54 1

type t_Braking'0  =
  | C_UrgentBrake'0
  | C_SoftBrake'0
  | C_NoBrake'0

use creusot.prelude.Intrinsic

type t_BrakingDeepModel'0  =
  | C_UrgentBrake'1
  | C_SoftBrake'1
  | C_NoBrake'1

function deep_model'1 [#"/home/thome/Documents/git/langrust/grustine/examples/aeb_greusot/src/lib.rs" 5 0 54 1] (self : t_Braking'0) : t_BrakingDeepModel'0

 =
  [%#slib2] match self with
    | C_UrgentBrake'0 -> C_UrgentBrake'1
    | C_SoftBrake'0 -> C_SoftBrake'1
    | C_NoBrake'0 -> C_NoBrake'1
    end

function deep_model'0 (self : t_Braking'0) : t_BrakingDeepModel'0 =
  [%#smodel1] deep_model'1 self

meta "compute_max_steps" 1000000

let rec eq'0[#"/home/thome/Documents/git/langrust/grustine/examples/aeb_greusot/src/lib.rs" 5 0 54 1] (self:t_Braking'0) (rhs:t_Braking'0) (return'  (ret:bool))= (! bb0
  [ bb0 = s0
    [ s0 =  [ &_4 <- (self, rhs) ] s1
    | s1 = any
      [ br0 -> {(let (r'0, _) = _4 in r'0) = C_UrgentBrake'0 } (! bb2)
      | br1 -> {(let (r'0, _) = _4 in r'0) = C_SoftBrake'0 } (! bb4)
      | br2 -> {(let (r'0, _) = _4 in r'0) = C_NoBrake'0 } (! bb6) ]
     ]
  
  | bb6 = any
    [ br0 -> {(let (_, r'0) = _4 in r'0) = C_UrgentBrake'0 } (! bb1)
    | br1 -> {(let (_, r'0) = _4 in r'0) = C_SoftBrake'0 } (! bb1)
    | br2 -> {(let (_, r'0) = _4 in r'0) = C_NoBrake'0 } (! bb7) ]
  
  | bb7 = bb8
  | bb8 = s0 [ s0 =  [ &_0 <- [%#slib0] true ] s1 | s1 = bb11 ] 
  | bb4 = any
    [ br0 -> {(let (_, r'0) = _4 in r'0) = C_UrgentBrake'0 } (! bb1)
    | br1 -> {(let (_, r'0) = _4 in r'0) = C_SoftBrake'0 } (! bb5)
    | br2 -> {(let (_, r'0) = _4 in r'0) = C_NoBrake'0 } (! bb1) ]
  
  | bb5 = bb9
  | bb9 = s0 [ s0 =  [ &_0 <- [%#slib0] true ] s1 | s1 = bb11 ] 
  | bb2 = any
    [ br0 -> {(let (_, r'0) = _4 in r'0) = C_UrgentBrake'0 } (! bb3)
    | br1 -> {(let (_, r'0) = _4 in r'0) = C_SoftBrake'0 } (! bb1)
    | br2 -> {(let (_, r'0) = _4 in r'0) = C_NoBrake'0 } (! bb1) ]
  
  | bb1 = s0 [ s0 =  [ &_0 <- [%#slib0] false ] s1 | s1 = bb11 ] 
  | bb3 = bb10
  | bb10 = s0 [ s0 =  [ &_0 <- [%#slib0] true ] s1 | s1 = bb11 ] 
  | bb11 = return' {_0} ]
  )
  [ & _0 : bool = Intrinsic.any_l ()
  | & self : t_Braking'0 = self
  | & rhs : t_Braking'0 = rhs
  | & _4 : (t_Braking'0, t_Braking'0) = Intrinsic.any_l () ]
  
  [ return' (result:bool)-> {[@expl:eq ensures] [%#slib0] result = (deep_model'0 self = deep_model'0 rhs)}
    (! return' {result}) ]
  
