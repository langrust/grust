use crate::ast::{
    function::Function,
    node::Node,
    component::Component,
    file::File,
};
use crate::util::location::Location;
use crate::util::files::FileId;

grammar(file_id: FileId);

/// Catches function
pub function: Function = {
    <start:@L> "function" <end:@R> => {
        Function {
            location: Location{ file_id, range: start..end },
        }
    },
};

/// Catches node
pub node: Node = {
    <start:@L> "node" <end:@R> => {
        Node {
            location: Location{ file_id, range: start..end },
        }
    },
};

/// Catches component
pub component: Component = {
    <start:@L> "component" <end:@R> => {
        Component {
            location: Location{ file_id, range: start..end },
        }
    },
};

/// Catches LanGRust modules
pub module: File = {
    <start:@L> <f: function> <end:@R> =>  File::Module{
        functions: vec![f],
        nodes: vec![],
        location: Location{ file_id, range: start..end }
    },
    <start:@L> <n: node> <end:@R> =>  File::Module{
        functions: vec![],
        nodes: vec![n],
        location: Location{ file_id, range: start..end }
    },
    <start:@L> <mut m: module> <f: function> <end:@R> => {
        m.push_function(f);
        m.set_location(Location{ file_id, range: start..end });
        m
    },
    <start:@L> <mut m: module> <n: node> <end:@R> => {
        m.push_node(n);
        m.set_location(Location{ file_id, range: start..end });
        m
    },
}

/// Catches LanGRust programs
pub program: File = {
    <start:@L> <c: component> <end:@R> => File::Program{
        functions: vec![],
        nodes: vec![],
        component: c,
        location: Location{ file_id, range: start..end }
    },
    <start:@L> <m: module> <c: component> <end:@R> =>  {
        let (functions, nodes) = m.get_functions_nodes();
        File::Program{
            functions,
            nodes,
            component: c,
            location: Location{ file_id, range: start..end }
        }
    },
    <start:@L> <mut p: program> <f: function> <end:@R> => {
        p.push_function(f);
        p.set_location(Location{ file_id, range: start..end });
        p
    },
    <start:@L> <mut p: program> <n: node> <end:@R> => {
        p.push_node(n);
        p.set_location(Location{ file_id, range: start..end });
        p
    },
}

pub file: File = {
    <m: module> => m,
    <p: program> => p,
}