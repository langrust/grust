use super::file::File;

#[derive(serde::Serialize)]
/// A Rust source code project.
pub struct Project {
    /// Project's directory.
    pub directory: String,
    /// All the files contained by the project.
    pub files: Vec<File>,
}
impl Project {
    /// Create a new project.
    pub fn new() -> Self {
        Project {
            files: vec![],
            directory: String::new(),
        }
    }

    /// Add file.
    pub fn add_file(&mut self, file: File) {
        self.files.push(file)
    }

    /// Set project's directory.
    pub fn set_parent<P>(&mut self, path: P)
    where
        P: AsRef<std::path::Path>,
    {
        let subdirectory = std::mem::take(&mut self.directory);
        self.directory = path
            .as_ref()
            .join(subdirectory)
            .into_os_string()
            .into_string()
            .unwrap();
        self.files
            .iter_mut()
            .for_each(|file| file.set_parent(&path))
    }

    /// Generate Rust project.
    pub fn generate(&self) {
        for file in &self.files {
            file.generate()
        }
        self.generate_cargo();
        self.generate_gitignore();
    }

    fn generate_cargo(&self) {
        let project_name = std::path::Path::new(&self.directory)
            .file_stem()
            .unwrap()
            .to_str()
            .unwrap();
        let file_string = format!(
            "[package]
name = \"{project_name}\"
version = \"0.1.0\"
edition = \"2021\"
authors = [\"Émilie THOMÉ <emilie.e.thome@renault.com>\"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
"
        );
        let path = std::path::Path::new(&self.directory).join("Cargo.toml");

        if let Some(p) = AsRef::<std::path::Path>::as_ref(&path).parent() {
            std::fs::create_dir_all(p).unwrap()
        };
        std::fs::write(path, file_string).unwrap();
    }

    fn generate_gitignore(&self) {
        let file_string = "# Rust ignores
#=============
# Compiled files
*.o
*.so
*.rlib
*.dll

# Executables
*.exe

# Generated by Cargo
/target

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here http://doc.crates.io/guide.html#cargotoml-vs-cargolock
Cargo.lock

# VScode settings
/.vscode
";
        let path = std::path::Path::new(&self.directory).join(".gitignore");

        if let Some(p) = AsRef::<std::path::Path>::as_ref(&path).parent() {
            std::fs::create_dir_all(p).unwrap()
        };
        std::fs::write(path, file_string).unwrap();
    }
}

impl Default for Project {
    fn default() -> Self {
        Project::new()
    }
}
