enum Priority {
    Low, Medium, High
}

struct Alarm {
    priority: Priority,
    raised: bool,
}

function high_priority(alarm_frequence: (Alarm, int)) -> bool {
    let alarm: Alarm = alarm_frequence.0;
    let frequence: int = alarm_frequence.1;
    let is_raiseable: bool = frequence > 3 && match (alarm) {
        Alarm {
            priority: Priority::High,
            raised: raised,
        } => raised,
        _ => false,
    };
    return is_raiseable;
}

function alarms_processing(
    alarms: [Alarm; 10],
    frequences: [int; 10]
) -> [(Alarm, int); 10] {
    return zip(alarms, frequences);
}

node alarm_manager(alarms: [Alarm; 10], frequences: [int; 10]) {
    out raise: [bool; 10] = alarms_processing(alarms, frequences).map(high_priority);
}
