struct GainPID {
    k_p: float,
    k_i: float,
    k_d: float,
}

node integrate(x: float, dt: float) {
    prev_i: float = 0.0 fby i;
    out i: float = min(prev_i + x * dt, MAX_INTEGRALE);
    MAX_INTEGRALE: float = 1000.0;
}

function min(a: float, b: float) -> float {
    let test: bool = a > b;
    let result: float = if test then b else a;
    return result;
}

node derive(x: float, dt: float) {
    out d: float = (x - prev_x)/dt;
    prev_x: float = 0.0 fby x;
}

function access_k_p(gain: GainPID) -> float {
    return gain.k_p;
}

function access_k_i(gain: GainPID) -> float {
    return gain.k_i;
}

function access_k_d(gain: GainPID) -> float {
    return gain.k_d;
}

component pid(v_c: float, v: float, dt: float) {
    gain: GainPID = GainPID {
        k_p: 0.2,
        k_i: 1.5,
        k_d: 6.0,
    };
    out u: float = access_k_p(gain) * e + access_k_i(gain) * e_i + access_k_d(gain) * e_d;
    e: float = v_c - v;
    e_i: float = integrate(e, dt).i;
    e_d: float = derive(e, dt).d;
}
