---
source: tests/lir_from_hir.rs
expression: file
---
items:
  - NodeFile:
      name: counter_o
      imports: []
      input:
        node_name: counter_o
        elements:
          - identifier: res
            type: Boolean
          - identifier: tick
            type: Boolean
      state:
        node_name: counter_o
        elements:
          - Buffer:
              identifier: mem_o
              type: Integer
        step:
          node_name: counter_o
          output_type: Integer
          body:
            - Let:
                identifier: o
                expression:
                  IfThenElse:
                    condition:
                      InputAccess:
                        identifier: res
                    then_branch:
                      statements:
                        - ExpressionLast:
                            expression:
                              Literal:
                                literal:
                                  Integer: 0
                    else_branch:
                      statements:
                        - ExpressionLast:
                            expression:
                              FunctionCall:
                                function:
                                  Identifier:
                                    identifier: " + "
                                arguments:
                                  - FunctionCall:
                                      function:
                                        Identifier:
                                          identifier: (_)
                                      arguments:
                                        - MemoryAccess:
                                            identifier: mem_o
                                  - Identifier:
                                      identifier: inc
            - Let:
                identifier: inc
                expression:
                  IfThenElse:
                    condition:
                      InputAccess:
                        identifier: tick
                    then_branch:
                      statements:
                        - ExpressionLast:
                            expression:
                              Literal:
                                literal:
                                  Integer: 1
                    else_branch:
                      statements:
                        - ExpressionLast:
                            expression:
                              Literal:
                                literal:
                                  Integer: 0
          state_elements_step:
            - identifier: mem_o
              expression:
                Identifier:
                  identifier: o
          output_expression:
            Identifier:
              identifier: o
          contract:
            requires: []
            ensures: []
            invariant: []
        init:
          node_name: counter_o
          state_elements_init:
            - BufferInit:
                identifier: mem_o
                initial_value:
                  Integer: 0
          invariant_initialisation: []
  - NodeFile:
      name: main_y
      imports: []
      input:
        node_name: main_y
        elements: []
      state:
        node_name: main_y
        elements:
          - Buffer:
              identifier: mem_x
              type: Boolean
          - Buffer:
              identifier: mem_half
              type: Boolean
          - CalledNode:
              identifier: counter_o
              node_name: 25_19
        step:
          node_name: main_y
          output_type: Integer
          body:
            - Let:
                identifier: y
                expression:
                  NodeCall:
                    node_identifier: counter_o
                    input_name: CounterOInput
                    input_fields:
                      - - res
                        - Identifier:
                            identifier: x
                      - - tick
                        - Identifier:
                            identifier: half
            - Let:
                identifier: half
                expression:
                  MemoryAccess:
                    identifier: mem_half
            - Let:
                identifier: x
                expression:
                  MemoryAccess:
                    identifier: mem_x
          state_elements_step:
            - identifier: mem_x
              expression:
                FunctionCall:
                  function:
                    Identifier:
                      identifier: (_)
                  arguments:
                    - FunctionCall:
                        function:
                          Identifier:
                            identifier: " > "
                        arguments:
                          - Identifier:
                              identifier: y
                          - Literal:
                              literal:
                                Integer: 35
            - identifier: mem_half
              expression:
                FunctionCall:
                  function:
                    Identifier:
                      identifier: "!"
                  arguments:
                    - Identifier:
                        identifier: half
          output_expression:
            Identifier:
              identifier: y
          contract:
            requires: []
            ensures: []
            invariant: []
        init:
          node_name: main_y
          state_elements_init:
            - BufferInit:
                identifier: mem_x
                initial_value:
                  Boolean: false
            - BufferInit:
                identifier: mem_half
                initial_value:
                  Boolean: true
            - CalledNodeInit:
                identifier: counter_o
                node_name: 25_19
          invariant_initialisation: []

