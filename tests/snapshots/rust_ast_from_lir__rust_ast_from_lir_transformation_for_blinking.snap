---
source: tests/rust_ast_from_lir.rs
expression: project
---
RustASTProject {
    directory: "",
    files: {
        "src/blinking_status.rs": File {
            shebang: None,
            attrs: [],
            items: [
                Item::Struct {
                    attrs: [],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    struct_token: Struct,
                    ident: Ident(
                        BlinkingStatusInput,
                    ),
                    generics: Generics {
                        lt_token: None,
                        params: [],
                        gt_token: None,
                        where_clause: None,
                    },
                    fields: Fields::Named {
                        brace_token: Brace,
                        named: [
                            Field {
                                attrs: [],
                                vis: Visibility::Public(
                                    Pub,
                                ),
                                mutability: FieldMutability::None,
                                ident: Some(
                                    Ident(
                                        tick_number,
                                    ),
                                ),
                                colon_token: Some(
                                    Colon,
                                ),
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    i64,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                    semi_token: None,
                },
                Item::Struct {
                    attrs: [],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    struct_token: Struct,
                    ident: Ident(
                        BlinkingStatusState,
                    ),
                    generics: Generics {
                        lt_token: None,
                        params: [],
                        gt_token: None,
                        where_clause: None,
                    },
                    fields: Fields::Named {
                        brace_token: Brace,
                        named: [
                            Field {
                                attrs: [],
                                vis: Visibility::Inherited,
                                mutability: FieldMutability::None,
                                ident: Some(
                                    Ident(
                                        mem_res,
                                    ),
                                ),
                                colon_token: Some(
                                    Colon,
                                ),
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    bool,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                            Comma,
                            Field {
                                attrs: [],
                                vis: Visibility::Inherited,
                                mutability: FieldMutability::None,
                                ident: Some(
                                    Ident(
                                        mem_on_off,
                                    ),
                                ),
                                colon_token: Some(
                                    Colon,
                                ),
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    bool,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                            Comma,
                            Field {
                                attrs: [],
                                vis: Visibility::Inherited,
                                mutability: FieldMutability::None,
                                ident: Some(
                                    Ident(
                                        counter_o,
                                    ),
                                ),
                                colon_token: Some(
                                    Colon,
                                ),
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    CounterOState,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                    semi_token: None,
                },
                Item::Impl {
                    attrs: [],
                    defaultness: None,
                    unsafety: None,
                    impl_token: Impl,
                    generics: Generics {
                        lt_token: None,
                        params: [],
                        gt_token: None,
                        where_clause: None,
                    },
                    trait_: None,
                    self_ty: Type::Path {
                        qself: None,
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident(
                                        BlinkingStatusState,
                                    ),
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                    },
                    brace_token: Brace,
                    items: [
                        ImplItem::Fn {
                            attrs: [],
                            vis: Visibility::Public(
                                Pub,
                            ),
                            defaultness: None,
                            sig: Signature {
                                constness: None,
                                asyncness: None,
                                unsafety: None,
                                abi: None,
                                fn_token: Fn,
                                ident: Ident(
                                    init,
                                ),
                                generics: Generics {
                                    lt_token: None,
                                    params: [],
                                    gt_token: None,
                                    where_clause: None,
                                },
                                paren_token: Paren,
                                inputs: [],
                                variadic: None,
                                output: ReturnType::Type(
                                    RArrow,
                                    Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident(
                                                        BlinkingStatusState,
                                                    ),
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                ),
                            },
                            block: Block {
                                brace_token: Brace,
                                stmts: [
                                    Stmt::Expr(
                                        Expr::Struct {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident(
                                                            BlinkingStatusState,
                                                        ),
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                            brace_token: Brace,
                                            fields: [
                                                FieldValue {
                                                    attrs: [],
                                                    member: Member::Named(
                                                        Ident(
                                                            mem_res,
                                                        ),
                                                    ),
                                                    colon_token: Some(
                                                        Colon,
                                                    ),
                                                    expr: Expr::Lit {
                                                        attrs: [],
                                                        lit: Lit::Bool {
                                                            value: true,
                                                        },
                                                    },
                                                },
                                                Comma,
                                                FieldValue {
                                                    attrs: [],
                                                    member: Member::Named(
                                                        Ident(
                                                            mem_on_off,
                                                        ),
                                                    ),
                                                    colon_token: Some(
                                                        Colon,
                                                    ),
                                                    expr: Expr::Lit {
                                                        attrs: [],
                                                        lit: Lit::Bool {
                                                            value: true,
                                                        },
                                                    },
                                                },
                                                Comma,
                                                FieldValue {
                                                    attrs: [],
                                                    member: Member::Named(
                                                        Ident(
                                                            counter_o,
                                                        ),
                                                    ),
                                                    colon_token: Some(
                                                        Colon,
                                                    ),
                                                    expr: Expr::Call {
                                                        attrs: [],
                                                        func: Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident(
                                                                            CounterOState,
                                                                        ),
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident(
                                                                            init,
                                                                        ),
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        paren_token: Paren,
                                                        args: [],
                                                    },
                                                },
                                            ],
                                            dot2_token: None,
                                            rest: None,
                                        },
                                        None,
                                    ),
                                ],
                            },
                        },
                        ImplItem::Fn {
                            attrs: [],
                            vis: Visibility::Public(
                                Pub,
                            ),
                            defaultness: None,
                            sig: Signature {
                                constness: None,
                                asyncness: None,
                                unsafety: None,
                                abi: None,
                                fn_token: Fn,
                                ident: Ident(
                                    step,
                                ),
                                generics: Generics {
                                    lt_token: None,
                                    params: [],
                                    gt_token: None,
                                    where_clause: None,
                                },
                                paren_token: Paren,
                                inputs: [
                                    FnArg::Receiver(
                                        Receiver {
                                            attrs: [],
                                            reference: Some(
                                                (
                                                    And,
                                                    None,
                                                ),
                                            ),
                                            mutability: Some(
                                                Mut,
                                            ),
                                            self_token: SelfValue,
                                            colon_token: None,
                                            ty: Type::Reference {
                                                and_token: And,
                                                lifetime: None,
                                                mutability: Some(
                                                    Mut,
                                                ),
                                                elem: Type::Path {
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident(
                                                                    Self,
                                                                ),
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            },
                                        },
                                    ),
                                    Comma,
                                    FnArg::Typed(
                                        PatType {
                                            attrs: [],
                                            pat: Pat::Ident {
                                                attrs: [],
                                                by_ref: None,
                                                mutability: None,
                                                ident: Ident(
                                                    input,
                                                ),
                                                subpat: None,
                                            },
                                            colon_token: Colon,
                                            ty: Type::Path {
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident(
                                                                BlinkingStatusInput,
                                                            ),
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        },
                                    ),
                                ],
                                variadic: None,
                                output: ReturnType::Type(
                                    RArrow,
                                    Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident(
                                                        i64,
                                                    ),
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                ),
                            },
                            block: Block {
                                brace_token: Brace,
                                stmts: [
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident(
                                                x,
                                            ),
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::Lit {
                                                    attrs: [],
                                                    lit: Lit::Bool {
                                                        value: true,
                                                    },
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident(
                                                res,
                                            ),
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::Field {
                                                    attrs: [],
                                                    base: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident(
                                                                        self,
                                                                    ),
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    member: Member::Named(
                                                        Ident(
                                                            mem_res,
                                                        ),
                                                    ),
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident(
                                                counter,
                                            ),
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::MethodCall {
                                                    attrs: [],
                                                    receiver: Expr::Field {
                                                        attrs: [],
                                                        base: Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident(
                                                                            self,
                                                                        ),
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        dot_token: Dot,
                                                        member: Member::Named(
                                                            Ident(
                                                                counter_o,
                                                            ),
                                                        ),
                                                    },
                                                    dot_token: Dot,
                                                    method: Ident(
                                                        step,
                                                    ),
                                                    turbofish: None,
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::Struct {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident(
                                                                            CounterOInput,
                                                                        ),
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                            brace_token: Brace,
                                                            fields: [
                                                                FieldValue {
                                                                    attrs: [],
                                                                    member: Member::Named(
                                                                        Ident(
                                                                            res,
                                                                        ),
                                                                    ),
                                                                    colon_token: Some(
                                                                        Colon,
                                                                    ),
                                                                    expr: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident(
                                                                                        res,
                                                                                    ),
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                },
                                                                Comma,
                                                                FieldValue {
                                                                    attrs: [],
                                                                    member: Member::Named(
                                                                        Ident(
                                                                            tick,
                                                                        ),
                                                                    ),
                                                                    colon_token: Some(
                                                                        Colon,
                                                                    ),
                                                                    expr: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident(
                                                                                        x,
                                                                                    ),
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                },
                                                            ],
                                                            dot2_token: None,
                                                            rest: None,
                                                        },
                                                    ],
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident(
                                                on_off,
                                            ),
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::Call {
                                                    attrs: [],
                                                    func: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident(
                                                                        Expr,
                                                                    ),
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident(
                                                                        FunctionCall,
                                                                    ),
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::Macro {
                                                            attrs: [],
                                                            mac: Macro {
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident(
                                                                                parse_quote,
                                                                            ),
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                                bang_token: Not,
                                                                delimiter: MacroDelimiter::Brace(
                                                                    Brace,
                                                                ),
                                                                tokens: TokenStream [
                                                                    Ident {
                                                                        sym: xor,
                                                                    },
                                                                    Group {
                                                                        delimiter: Parenthesis,
                                                                        stream: TokenStream [
                                                                            Ident {
                                                                                sym: res,
                                                                            },
                                                                            Punct {
                                                                                char: ',',
                                                                                spacing: Alone,
                                                                            },
                                                                            Ident {
                                                                                sym: self,
                                                                            },
                                                                            Punct {
                                                                                char: '.',
                                                                                spacing: Alone,
                                                                            },
                                                                            Ident {
                                                                                sym: mem_on_off,
                                                                            },
                                                                        ],
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ],
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident(
                                                status,
                                            ),
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::If {
                                                    attrs: [],
                                                    if_token: If,
                                                    cond: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident(
                                                                        on_off,
                                                                    ),
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    then_branch: Block {
                                                        brace_token: Brace,
                                                        stmts: [
                                                            Stmt::Expr(
                                                                Expr::Binary {
                                                                    attrs: [],
                                                                    left: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident(
                                                                                        counter,
                                                                                    ),
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    op: BinOp::Add(
                                                                        Plus,
                                                                    ),
                                                                    right: Expr::Lit {
                                                                        attrs: [],
                                                                        lit: Lit::Int {
                                                                            token: 1i64,
                                                                        },
                                                                    },
                                                                },
                                                                None,
                                                            ),
                                                        ],
                                                    },
                                                    else_branch: Some(
                                                        (
                                                            Else,
                                                            Expr::Block {
                                                                attrs: [],
                                                                label: None,
                                                                block: Block {
                                                                    brace_token: Brace,
                                                                    stmts: [
                                                                        Stmt::Expr(
                                                                            Expr::Lit {
                                                                                attrs: [],
                                                                                lit: Lit::Int {
                                                                                    token: 0i64,
                                                                                },
                                                                            },
                                                                            None,
                                                                        ),
                                                                    ],
                                                                },
                                                            },
                                                        ),
                                                    ),
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Expr(
                                        Expr::Assign {
                                            attrs: [],
                                            left: Expr::Field {
                                                attrs: [],
                                                base: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident(
                                                                    self,
                                                                ),
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                dot_token: Dot,
                                                member: Member::Named(
                                                    Ident(
                                                        mem_res,
                                                    ),
                                                ),
                                            },
                                            eq_token: Eq,
                                            right: Expr::Paren {
                                                attrs: [],
                                                paren_token: Paren,
                                                expr: Expr::Binary {
                                                    attrs: [],
                                                    left: Expr::Binary {
                                                        attrs: [],
                                                        left: Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident(
                                                                            counter,
                                                                        ),
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        op: BinOp::Add(
                                                            Plus,
                                                        ),
                                                        right: Expr::Lit {
                                                            attrs: [],
                                                            lit: Lit::Int {
                                                                token: 1i64,
                                                            },
                                                        },
                                                    },
                                                    op: BinOp::Eq(
                                                        EqEq,
                                                    ),
                                                    right: Expr::Field {
                                                        attrs: [],
                                                        base: Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident(
                                                                            input,
                                                                        ),
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        dot_token: Dot,
                                                        member: Member::Named(
                                                            Ident(
                                                                tick_number,
                                                            ),
                                                        ),
                                                    },
                                                },
                                            },
                                        },
                                        Some(
                                            Semi,
                                        ),
                                    ),
                                    Stmt::Expr(
                                        Expr::Assign {
                                            attrs: [],
                                            left: Expr::Field {
                                                attrs: [],
                                                base: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident(
                                                                    self,
                                                                ),
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                dot_token: Dot,
                                                member: Member::Named(
                                                    Ident(
                                                        mem_on_off,
                                                    ),
                                                ),
                                            },
                                            eq_token: Eq,
                                            right: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident(
                                                                on_off,
                                                            ),
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        },
                                        Some(
                                            Semi,
                                        ),
                                    ),
                                    Stmt::Expr(
                                        Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident(
                                                            status,
                                                        ),
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        None,
                                    ),
                                ],
                            },
                        },
                    ],
                },
            ],
        },
        "src/counter_o.rs": File {
            shebang: None,
            attrs: [],
            items: [
                Item::Struct {
                    attrs: [],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    struct_token: Struct,
                    ident: Ident(
                        CounterOInput,
                    ),
                    generics: Generics {
                        lt_token: None,
                        params: [],
                        gt_token: None,
                        where_clause: None,
                    },
                    fields: Fields::Named {
                        brace_token: Brace,
                        named: [
                            Field {
                                attrs: [],
                                vis: Visibility::Public(
                                    Pub,
                                ),
                                mutability: FieldMutability::None,
                                ident: Some(
                                    Ident(
                                        res,
                                    ),
                                ),
                                colon_token: Some(
                                    Colon,
                                ),
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    bool,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                            Comma,
                            Field {
                                attrs: [],
                                vis: Visibility::Public(
                                    Pub,
                                ),
                                mutability: FieldMutability::None,
                                ident: Some(
                                    Ident(
                                        tick,
                                    ),
                                ),
                                colon_token: Some(
                                    Colon,
                                ),
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    bool,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                    semi_token: None,
                },
                Item::Struct {
                    attrs: [],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    struct_token: Struct,
                    ident: Ident(
                        CounterOState,
                    ),
                    generics: Generics {
                        lt_token: None,
                        params: [],
                        gt_token: None,
                        where_clause: None,
                    },
                    fields: Fields::Named {
                        brace_token: Brace,
                        named: [
                            Field {
                                attrs: [],
                                vis: Visibility::Inherited,
                                mutability: FieldMutability::None,
                                ident: Some(
                                    Ident(
                                        mem_o,
                                    ),
                                ),
                                colon_token: Some(
                                    Colon,
                                ),
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    i64,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                    semi_token: None,
                },
                Item::Impl {
                    attrs: [],
                    defaultness: None,
                    unsafety: None,
                    impl_token: Impl,
                    generics: Generics {
                        lt_token: None,
                        params: [],
                        gt_token: None,
                        where_clause: None,
                    },
                    trait_: None,
                    self_ty: Type::Path {
                        qself: None,
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident(
                                        CounterOState,
                                    ),
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                    },
                    brace_token: Brace,
                    items: [
                        ImplItem::Fn {
                            attrs: [],
                            vis: Visibility::Public(
                                Pub,
                            ),
                            defaultness: None,
                            sig: Signature {
                                constness: None,
                                asyncness: None,
                                unsafety: None,
                                abi: None,
                                fn_token: Fn,
                                ident: Ident(
                                    init,
                                ),
                                generics: Generics {
                                    lt_token: None,
                                    params: [],
                                    gt_token: None,
                                    where_clause: None,
                                },
                                paren_token: Paren,
                                inputs: [],
                                variadic: None,
                                output: ReturnType::Type(
                                    RArrow,
                                    Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident(
                                                        CounterOState,
                                                    ),
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                ),
                            },
                            block: Block {
                                brace_token: Brace,
                                stmts: [
                                    Stmt::Expr(
                                        Expr::Struct {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident(
                                                            CounterOState,
                                                        ),
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                            brace_token: Brace,
                                            fields: [
                                                FieldValue {
                                                    attrs: [],
                                                    member: Member::Named(
                                                        Ident(
                                                            mem_o,
                                                        ),
                                                    ),
                                                    colon_token: Some(
                                                        Colon,
                                                    ),
                                                    expr: Expr::Lit {
                                                        attrs: [],
                                                        lit: Lit::Int {
                                                            token: 0i64,
                                                        },
                                                    },
                                                },
                                            ],
                                            dot2_token: None,
                                            rest: None,
                                        },
                                        None,
                                    ),
                                ],
                            },
                        },
                        ImplItem::Fn {
                            attrs: [],
                            vis: Visibility::Public(
                                Pub,
                            ),
                            defaultness: None,
                            sig: Signature {
                                constness: None,
                                asyncness: None,
                                unsafety: None,
                                abi: None,
                                fn_token: Fn,
                                ident: Ident(
                                    step,
                                ),
                                generics: Generics {
                                    lt_token: None,
                                    params: [],
                                    gt_token: None,
                                    where_clause: None,
                                },
                                paren_token: Paren,
                                inputs: [
                                    FnArg::Receiver(
                                        Receiver {
                                            attrs: [],
                                            reference: Some(
                                                (
                                                    And,
                                                    None,
                                                ),
                                            ),
                                            mutability: Some(
                                                Mut,
                                            ),
                                            self_token: SelfValue,
                                            colon_token: None,
                                            ty: Type::Reference {
                                                and_token: And,
                                                lifetime: None,
                                                mutability: Some(
                                                    Mut,
                                                ),
                                                elem: Type::Path {
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident(
                                                                    Self,
                                                                ),
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            },
                                        },
                                    ),
                                    Comma,
                                    FnArg::Typed(
                                        PatType {
                                            attrs: [],
                                            pat: Pat::Ident {
                                                attrs: [],
                                                by_ref: None,
                                                mutability: None,
                                                ident: Ident(
                                                    input,
                                                ),
                                                subpat: None,
                                            },
                                            colon_token: Colon,
                                            ty: Type::Path {
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident(
                                                                CounterOInput,
                                                            ),
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        },
                                    ),
                                ],
                                variadic: None,
                                output: ReturnType::Type(
                                    RArrow,
                                    Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident(
                                                        i64,
                                                    ),
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                ),
                            },
                            block: Block {
                                brace_token: Brace,
                                stmts: [
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident(
                                                inc,
                                            ),
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::If {
                                                    attrs: [],
                                                    if_token: If,
                                                    cond: Expr::Field {
                                                        attrs: [],
                                                        base: Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident(
                                                                            input,
                                                                        ),
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        dot_token: Dot,
                                                        member: Member::Named(
                                                            Ident(
                                                                tick,
                                                            ),
                                                        ),
                                                    },
                                                    then_branch: Block {
                                                        brace_token: Brace,
                                                        stmts: [
                                                            Stmt::Expr(
                                                                Expr::Lit {
                                                                    attrs: [],
                                                                    lit: Lit::Int {
                                                                        token: 1i64,
                                                                    },
                                                                },
                                                                None,
                                                            ),
                                                        ],
                                                    },
                                                    else_branch: Some(
                                                        (
                                                            Else,
                                                            Expr::Block {
                                                                attrs: [],
                                                                label: None,
                                                                block: Block {
                                                                    brace_token: Brace,
                                                                    stmts: [
                                                                        Stmt::Expr(
                                                                            Expr::Lit {
                                                                                attrs: [],
                                                                                lit: Lit::Int {
                                                                                    token: 0i64,
                                                                                },
                                                                            },
                                                                            None,
                                                                        ),
                                                                    ],
                                                                },
                                                            },
                                                        ),
                                                    ),
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident(
                                                o,
                                            ),
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::If {
                                                    attrs: [],
                                                    if_token: If,
                                                    cond: Expr::Field {
                                                        attrs: [],
                                                        base: Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident(
                                                                            input,
                                                                        ),
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        dot_token: Dot,
                                                        member: Member::Named(
                                                            Ident(
                                                                res,
                                                            ),
                                                        ),
                                                    },
                                                    then_branch: Block {
                                                        brace_token: Brace,
                                                        stmts: [
                                                            Stmt::Expr(
                                                                Expr::Lit {
                                                                    attrs: [],
                                                                    lit: Lit::Int {
                                                                        token: 0i64,
                                                                    },
                                                                },
                                                                None,
                                                            ),
                                                        ],
                                                    },
                                                    else_branch: Some(
                                                        (
                                                            Else,
                                                            Expr::Block {
                                                                attrs: [],
                                                                label: None,
                                                                block: Block {
                                                                    brace_token: Brace,
                                                                    stmts: [
                                                                        Stmt::Expr(
                                                                            Expr::Binary {
                                                                                attrs: [],
                                                                                left: Expr::Paren {
                                                                                    attrs: [],
                                                                                    paren_token: Paren,
                                                                                    expr: Expr::Field {
                                                                                        attrs: [],
                                                                                        base: Expr::Path {
                                                                                            attrs: [],
                                                                                            qself: None,
                                                                                            path: Path {
                                                                                                leading_colon: None,
                                                                                                segments: [
                                                                                                    PathSegment {
                                                                                                        ident: Ident(
                                                                                                            self,
                                                                                                        ),
                                                                                                        arguments: PathArguments::None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        },
                                                                                        dot_token: Dot,
                                                                                        member: Member::Named(
                                                                                            Ident(
                                                                                                mem_o,
                                                                                            ),
                                                                                        ),
                                                                                    },
                                                                                },
                                                                                op: BinOp::Add(
                                                                                    Plus,
                                                                                ),
                                                                                right: Expr::Path {
                                                                                    attrs: [],
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident(
                                                                                                    inc,
                                                                                                ),
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            },
                                                                            None,
                                                                        ),
                                                                    ],
                                                                },
                                                            },
                                                        ),
                                                    ),
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Expr(
                                        Expr::Assign {
                                            attrs: [],
                                            left: Expr::Field {
                                                attrs: [],
                                                base: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident(
                                                                    self,
                                                                ),
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                dot_token: Dot,
                                                member: Member::Named(
                                                    Ident(
                                                        mem_o,
                                                    ),
                                                ),
                                            },
                                            eq_token: Eq,
                                            right: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident(
                                                                o,
                                                            ),
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        },
                                        Some(
                                            Semi,
                                        ),
                                    ),
                                    Stmt::Expr(
                                        Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident(
                                                            o,
                                                        ),
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        None,
                                    ),
                                ],
                            },
                        },
                    ],
                },
            ],
        },
        "src/functions.rs": File {
            shebang: None,
            attrs: [],
            items: [
                Item::Fn {
                    attrs: [],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident(
                            xor,
                        ),
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident(
                                            t,
                                        ),
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident(
                                                        bool,
                                                    ),
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident(
                                            b,
                                        ),
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident(
                                                        bool,
                                                    ),
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident(
                                                bool,
                                            ),
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::If {
                                    attrs: [],
                                    if_token: If,
                                    cond: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident(
                                                        t,
                                                    ),
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    then_branch: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Expr(
                                                Expr::Unary {
                                                    attrs: [],
                                                    op: UnOp::Not(
                                                        Not,
                                                    ),
                                                    expr: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident(
                                                                        b,
                                                                    ),
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                },
                                                None,
                                            ),
                                        ],
                                    },
                                    else_branch: Some(
                                        (
                                            Else,
                                            Expr::Block {
                                                attrs: [],
                                                label: None,
                                                block: Block {
                                                    brace_token: Brace,
                                                    stmts: [
                                                        Stmt::Expr(
                                                            Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident(
                                                                                b,
                                                                            ),
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            None,
                                                        ),
                                                    ],
                                                },
                                            },
                                        ),
                                    ),
                                },
                                None,
                            ),
                        ],
                    },
                },
            ],
        },
        "src/lib.rs": File {
            shebang: None,
            attrs: [],
            items: [
                Item::Mod {
                    attrs: [],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    unsafety: None,
                    mod_token: Mod,
                    ident: Ident(
                        blinking_status,
                    ),
                    content: None,
                    semi: Some(
                        Semi,
                    ),
                },
                Item::Mod {
                    attrs: [],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    unsafety: None,
                    mod_token: Mod,
                    ident: Ident(
                        counter_o,
                    ),
                    content: None,
                    semi: Some(
                        Semi,
                    ),
                },
                Item::Mod {
                    attrs: [],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    unsafety: None,
                    mod_token: Mod,
                    ident: Ident(
                        functions,
                    ),
                    content: None,
                    semi: Some(
                        Semi,
                    ),
                },
                Item::Mod {
                    attrs: [],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    unsafety: None,
                    mod_token: Mod,
                    ident: Ident(
                        typedefs,
                    ),
                    content: None,
                    semi: Some(
                        Semi,
                    ),
                },
            ],
        },
        "src/typedefs.rs": File {
            shebang: None,
            attrs: [],
            items: [],
        },
    },
}
